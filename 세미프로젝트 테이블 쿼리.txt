CREATE TABLE member ( --회원 테이블
    userId VARCHAR2(50),
    userName VARCHAR2(50) NOT NULL,
    userPwd VARCHAR2(50) NOT NULL,
    userTel VARCHAR2(50) NOT NULL,
    userBirth VARCHAR2(50) NOT NULL,
    userNickName VARCHAR2(50) NOT NULL,
    userEmail VARCHAR2(50) NOT NULL,
    userRegDate DATE DEFAULT SYSDATE,
    userPoint NUMBER DEFAULT 0,
    userUpdateDate DATE,
    CONSTRAINT pk_member_userId PRIMARY KEY(userId)
);

CREATE TABLE admin( --관리자 테이블
    adminId VARCHAR2(50),
    adminPwd VARCHAR2(50),
    adminNickName VARCHAR2(50) NOT NULL,
    adminRegDate DATE DEFAULT SYSDATE,
    CONSTRAINT pk_admin_adminId PRIMARY KEY(adminId)
);

CREATE TABLE message( --쪽지 테이블
    msgNum NUMBER,
    msgWriterId VARCHAR2(50),
    msgSenderId VARCHAR2(50),
    msgContent CLOB NOT NULL,
    msgRegDate DATE DEFAULT SYSDATE,
    msgWEriEnabled NUMBER DEFAULT 1,
    msgSenEnabled NUMBER DEFAULT 1,
    CONSTRAINT pk_message_msgNum PRIMARY KEY(msgNum),
    CONSTRAINT fk_message_msgWriterId FOREIGN KEY(msgWriterId) REFERENCES member(userId), --ON DELETE CASCADE,
    CONSTRAINT fk_message_msgSenderId FOREIGN KEY(msgSenderId) REFERENCES member(userId) --ON DELETE CASCADE
);

CREATE SEQUENCE message_seq --쪽지 시퀀스
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE customServiceQuestion( -- Q & N 질문 테이블
    queNum NUMBER,
    userId VARCHAR2(50),
    queSubject VARCHAR2(50) NOT NULL,
    queContent CLOB NOT NULL,
    quePwd VARCHAR2(50) NOT NULL,
    queHitCount NUMBER DEFAULT 0,
    queRegDate DATE DEFAULT SYSDATE,
    CONSTRAINT pk_customServiceQuestion_queNum PRIMARY KEY(queNum),
    CONSTRAINT fk_customServiceQuestion_userId FOREIGN KEY(userId) REFERENCES member(userId) --ON DELETE CASCADE
);

CREATE SEQUENCE customServiceQuestion_seq --Q & N 시퀀스
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;


CREATE TABLE customServiceQuestionFile( --Q & N 질문 파일 테이블
    quePhotoNum NUMBER,
    queNum NUMBER NOT NULL,
    queFileName VARCHAR2(50),
    CONSTRAINT pk_customServiceQuestionFile_quePhotoNum PRIMARY KEY(quePhotoNum),
    CONSTRAINT fk_customServiceQuestionFile_queNum FOREIGN KEY(queNum) REFERENCES customServiceQuestion(queNum) ON DELETE CASCADE
);

CREATE SEQUENCE customServiceQuestionFile_seq --Q & N 질문 파일 시퀀스
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE customServiceAnswer( -- Q & N 답변 테이블
    queNum NUMBER,
    adminId VARCHAR2(50),
    ansSubject VARCHAR2(50) NOT NULL,
    ansContent CLOB NOT NULL,
    ansHitCount NUMBER DEFAULT 0,
    ansRegDate DATE DEFAULT SYSDATE,
    CONSTRAINT pk_customServiceAnswer_queNum PRIMARY KEY(queNum),
    CONSTRAINT fk_customServiceAnswer_adminId FOREIGN KEY(adminId) REFERENCES admin(adminId) --ON DELETE CASCADE
);

CREATE TABLE customServiceAnswerFile( -- Q & N 답변 파일 테이블
    ansPhotoNum NUMBER,
    queNum NUMBER NOT NULL,
    ansFileName VARCHAR2(50),
    CONSTRAINT pk_customServiceAnswerFile_ansPhotoNum PRIMARY KEY(ansPhotoNum),
    CONSTRAINT fk_customServiceAnswerFile_queNum FOREIGN KEY(queNum) REFERENCES customServiceAnswer(queNum) ON DELETE CASCADE
);

CREATE SEQUENCE customServiceAnswerFile_seq --Q & N 답변 파일 시퀀스
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;


CREATE TABLE campInfo( --캠핌 정보 테이블
    camInfoNum NUMBER,
    adminId VARCHAR2(50),
    camInfoSubject VARCHAR2(50) NOT NULL,
    camInfoContent CLOB NOT NULL,
    camInfoAddr VARCHAR2(50) NOT NULL,
    camInfoHitCount NUMBER DEFAULT 0,
    camInfoRegDate DATE DEFAULT SYSDATE,
    camThemaName VARCHAR2(50) NOT NULL,
    CONSTRAINT pk_campInfo_camInfoNum PRIMARY KEY(camInfoNum),
    CONSTRAINT fk_campInfo_adminId FOREIGN KEY(adminId) REFERENCES admin(adminId) --ON DELETE CASCADE
);

CREATE SEQUENCE campInfo_seq --캠핑장 정보 시퀀스
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;


CREATE TABLE campPhoto ( --캠핑장 정보 사진
    camInfoPhotoNum NUMBER,
    camInfoNum NUMBER NOT NULL,
    camInfoPhotoName VARCHAR2(50) NOT NULL,
    CONSTRAINT pk_campPhoto_camInfoPhotoNum PRIMARY KEY(camInfoPhotoNum),
    CONSTRAINT fk_campPhoto_camInfoNum FOREIGN KEY(camInfoNum) REFERENCES campInfo(camInfoNum) ON DELETE CASCADE
);


CREATE SEQUENCE campPhoto_seq --캠핑장 정보 시퀀스
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE campInfoKeyword ( --캠핑장 정보의 키워드명 테이블
    campInfoNum NUMBER NOT NULL,
    keywordName VARCHAR2(50) NOT NULL,
    CONSTRAINT fk_campInfoKeyword_camInfoNum FOREIGN KEY(camInfoNum) REFERENCES campInfo(camInfoNum) ON DELETE CASCADE,
    CONSTRAINT fk_campInfoKeyword_keywordName FOREIGN KEY(keywordName) REFERENCES keywordName(keywordName) ON DELETE CASCADE
);

CREATE TABLE keywordName( --키워드 테이블명
    keywordName VARCHAR2(50) NOT NULL,
    CONSTRAINT pk_keywordName_keywordName PRIMARY KEY(keywordName)
);

CREATE TABLE campWish( --찜 테이블
    campInfoNum NUMBER NOT NULL,
    userId VARCHAR2(50) NOT NULL,
    CONSTRAINT fk_campWish_camInfoNum FOREIGN KEY(camInfoNum) REFERENCES campInfo(camInfoNum) ON DELETE CASCADE,
    CONSTRAINT fk_campWish_userId FOREIGN KEY(userId) REFERENCES member(userId) ON DELETE CASCADE
);

CREATE TABLE pointRecord( --포인트 입출금
    pointNum NUMBER,
    userId VARCHAR2(50) NOT NULL,
    pointMode VARCHAR2(10) CHECK(col IN('입금', '출금')) NOT NULL,
    pointDate DATE DEFAULT SYSDATE,
    pointAmount NUMBER DEFAULT 0,
    CONSTRAINT pk_pointRecord_pointNum PRIMARY KEY (pointNum),
    CONSTRAINT fk_pointRecord_userId FOREIGN KEY(userId) REFERENCES member(userId) ON DELETE CASCADE
);

CREATE SEQUENCE pointRecord_seq --포인트 입출금 시퀀스
INCREMENT BY 1
START WITH 1
NOMAXVALUE
NOCYCLE
NOCACHE;

CREATE TABLE rental( --렌탈 테이블
    rentNum NUMBER,
    hostId VARCHAR2(50) NOT NULL,
    rentId VARCHAR2(50) NOT NULL,
    rentObject VARCHAR2(50) NOT NULL,
    rentFee NUMBER NOT NULL,
    rentStartDate DATE NOT NULL,
    rentEndDate DATE NOT NULL,
    CONSTRAINT pk_rental_rentNum PRIMARY KEY (rentNum),
    CONSTRAINT fk_rental_hostId FOREIGN KEY(hostId) REFERENCES member(userId) ON DELETE CASCADE,
    CONSTRAINT fk_rental_rentId FOREIGN KEY(rentId) REFERENCES member(userId) ON DELETE CASCADE
);